// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.5.1
// source: practice/practicepb/practice.proto

package practicepb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Practicing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstState  string `protobuf:"bytes,1,opt,name=first_state,json=firstState,proto3" json:"first_state,omitempty"`
	SecondState string `protobuf:"bytes,2,opt,name=second_state,json=secondState,proto3" json:"second_state,omitempty"`
}

func (x *Practicing) Reset() {
	*x = Practicing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_practice_practicepb_practice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Practicing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Practicing) ProtoMessage() {}

func (x *Practicing) ProtoReflect() protoreflect.Message {
	mi := &file_practice_practicepb_practice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Practicing.ProtoReflect.Descriptor instead.
func (*Practicing) Descriptor() ([]byte, []int) {
	return file_practice_practicepb_practice_proto_rawDescGZIP(), []int{0}
}

func (x *Practicing) GetFirstState() string {
	if x != nil {
		return x.FirstState
	}
	return ""
}

func (x *Practicing) GetSecondState() string {
	if x != nil {
		return x.SecondState
	}
	return ""
}

type PracticeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Practicing *Practicing `protobuf:"bytes,1,opt,name=practicing,proto3" json:"practicing,omitempty"`
}

func (x *PracticeRequest) Reset() {
	*x = PracticeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_practice_practicepb_practice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PracticeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PracticeRequest) ProtoMessage() {}

func (x *PracticeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_practice_practicepb_practice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PracticeRequest.ProtoReflect.Descriptor instead.
func (*PracticeRequest) Descriptor() ([]byte, []int) {
	return file_practice_practicepb_practice_proto_rawDescGZIP(), []int{1}
}

func (x *PracticeRequest) GetPracticing() *Practicing {
	if x != nil {
		return x.Practicing
	}
	return nil
}

type PracticeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *PracticeResponse) Reset() {
	*x = PracticeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_practice_practicepb_practice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PracticeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PracticeResponse) ProtoMessage() {}

func (x *PracticeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_practice_practicepb_practice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PracticeResponse.ProtoReflect.Descriptor instead.
func (*PracticeResponse) Descriptor() ([]byte, []int) {
	return file_practice_practicepb_practice_proto_rawDescGZIP(), []int{2}
}

func (x *PracticeResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type PracticeManyTimesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Practicing *Practicing `protobuf:"bytes,1,opt,name=practicing,proto3" json:"practicing,omitempty"`
}

func (x *PracticeManyTimesRequest) Reset() {
	*x = PracticeManyTimesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_practice_practicepb_practice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PracticeManyTimesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PracticeManyTimesRequest) ProtoMessage() {}

func (x *PracticeManyTimesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_practice_practicepb_practice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PracticeManyTimesRequest.ProtoReflect.Descriptor instead.
func (*PracticeManyTimesRequest) Descriptor() ([]byte, []int) {
	return file_practice_practicepb_practice_proto_rawDescGZIP(), []int{3}
}

func (x *PracticeManyTimesRequest) GetPracticing() *Practicing {
	if x != nil {
		return x.Practicing
	}
	return nil
}

type PracticeManyTimesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *PracticeManyTimesResponse) Reset() {
	*x = PracticeManyTimesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_practice_practicepb_practice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PracticeManyTimesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PracticeManyTimesResponse) ProtoMessage() {}

func (x *PracticeManyTimesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_practice_practicepb_practice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PracticeManyTimesResponse.ProtoReflect.Descriptor instead.
func (*PracticeManyTimesResponse) Descriptor() ([]byte, []int) {
	return file_practice_practicepb_practice_proto_rawDescGZIP(), []int{4}
}

func (x *PracticeManyTimesResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type LongPracticeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Practicing *Practicing `protobuf:"bytes,1,opt,name=practicing,proto3" json:"practicing,omitempty"`
}

func (x *LongPracticeRequest) Reset() {
	*x = LongPracticeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_practice_practicepb_practice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LongPracticeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongPracticeRequest) ProtoMessage() {}

func (x *LongPracticeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_practice_practicepb_practice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongPracticeRequest.ProtoReflect.Descriptor instead.
func (*LongPracticeRequest) Descriptor() ([]byte, []int) {
	return file_practice_practicepb_practice_proto_rawDescGZIP(), []int{5}
}

func (x *LongPracticeRequest) GetPracticing() *Practicing {
	if x != nil {
		return x.Practicing
	}
	return nil
}

type LongPracticeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *LongPracticeResponse) Reset() {
	*x = LongPracticeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_practice_practicepb_practice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LongPracticeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongPracticeResponse) ProtoMessage() {}

func (x *LongPracticeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_practice_practicepb_practice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongPracticeResponse.ProtoReflect.Descriptor instead.
func (*LongPracticeResponse) Descriptor() ([]byte, []int) {
	return file_practice_practicepb_practice_proto_rawDescGZIP(), []int{6}
}

func (x *LongPracticeResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

var File_practice_practicepb_practice_proto protoreflect.FileDescriptor

var file_practice_practicepb_practice_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x63, 0x65, 0x70, 0x62, 0x2f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x22, 0x50,
	0x0a, 0x0a, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x47, 0x0a, 0x0f, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x22, 0x2a, 0x0a, 0x10, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x50, 0x0a, 0x18, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x22, 0x33, 0x0a, 0x19, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4b, 0x0a, 0x13,
	0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x22, 0x2e, 0x0a, 0x14, 0x4c, 0x6f, 0x6e,
	0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x8b, 0x02, 0x0a, 0x0f, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a,
	0x08, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x6e, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0c, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x6f, 0x6e, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x42, 0x0c, 0x5a, 0x0a, 0x70, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x63, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_practice_practicepb_practice_proto_rawDescOnce sync.Once
	file_practice_practicepb_practice_proto_rawDescData = file_practice_practicepb_practice_proto_rawDesc
)

func file_practice_practicepb_practice_proto_rawDescGZIP() []byte {
	file_practice_practicepb_practice_proto_rawDescOnce.Do(func() {
		file_practice_practicepb_practice_proto_rawDescData = protoimpl.X.CompressGZIP(file_practice_practicepb_practice_proto_rawDescData)
	})
	return file_practice_practicepb_practice_proto_rawDescData
}

var file_practice_practicepb_practice_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_practice_practicepb_practice_proto_goTypes = []interface{}{
	(*Practicing)(nil),                // 0: practice.Practicing
	(*PracticeRequest)(nil),           // 1: practice.PracticeRequest
	(*PracticeResponse)(nil),          // 2: practice.PracticeResponse
	(*PracticeManyTimesRequest)(nil),  // 3: practice.PracticeManyTimesRequest
	(*PracticeManyTimesResponse)(nil), // 4: practice.PracticeManyTimesResponse
	(*LongPracticeRequest)(nil),       // 5: practice.LongPracticeRequest
	(*LongPracticeResponse)(nil),      // 6: practice.LongPracticeResponse
}
var file_practice_practicepb_practice_proto_depIdxs = []int32{
	0, // 0: practice.PracticeRequest.practicing:type_name -> practice.Practicing
	0, // 1: practice.PracticeManyTimesRequest.practicing:type_name -> practice.Practicing
	0, // 2: practice.LongPracticeRequest.practicing:type_name -> practice.Practicing
	1, // 3: practice.PracticeService.Practice:input_type -> practice.PracticeRequest
	3, // 4: practice.PracticeService.PracticeManyTimes:input_type -> practice.PracticeManyTimesRequest
	5, // 5: practice.PracticeService.LongPractice:input_type -> practice.LongPracticeRequest
	2, // 6: practice.PracticeService.Practice:output_type -> practice.PracticeResponse
	4, // 7: practice.PracticeService.PracticeManyTimes:output_type -> practice.PracticeManyTimesResponse
	6, // 8: practice.PracticeService.LongPractice:output_type -> practice.LongPracticeResponse
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_practice_practicepb_practice_proto_init() }
func file_practice_practicepb_practice_proto_init() {
	if File_practice_practicepb_practice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_practice_practicepb_practice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Practicing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_practice_practicepb_practice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PracticeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_practice_practicepb_practice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PracticeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_practice_practicepb_practice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PracticeManyTimesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_practice_practicepb_practice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PracticeManyTimesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_practice_practicepb_practice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LongPracticeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_practice_practicepb_practice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LongPracticeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_practice_practicepb_practice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_practice_practicepb_practice_proto_goTypes,
		DependencyIndexes: file_practice_practicepb_practice_proto_depIdxs,
		MessageInfos:      file_practice_practicepb_practice_proto_msgTypes,
	}.Build()
	File_practice_practicepb_practice_proto = out.File
	file_practice_practicepb_practice_proto_rawDesc = nil
	file_practice_practicepb_practice_proto_goTypes = nil
	file_practice_practicepb_practice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PracticeServiceClient is the client API for PracticeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PracticeServiceClient interface {
	// Unary
	Practice(ctx context.Context, in *PracticeRequest, opts ...grpc.CallOption) (*PracticeResponse, error)
	// Server Streaming
	PracticeManyTimes(ctx context.Context, in *PracticeManyTimesRequest, opts ...grpc.CallOption) (PracticeService_PracticeManyTimesClient, error)
	// Client Streaming
	LongPractice(ctx context.Context, opts ...grpc.CallOption) (PracticeService_LongPracticeClient, error)
}

type practiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPracticeServiceClient(cc grpc.ClientConnInterface) PracticeServiceClient {
	return &practiceServiceClient{cc}
}

func (c *practiceServiceClient) Practice(ctx context.Context, in *PracticeRequest, opts ...grpc.CallOption) (*PracticeResponse, error) {
	out := new(PracticeResponse)
	err := c.cc.Invoke(ctx, "/practice.PracticeService/Practice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *practiceServiceClient) PracticeManyTimes(ctx context.Context, in *PracticeManyTimesRequest, opts ...grpc.CallOption) (PracticeService_PracticeManyTimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PracticeService_serviceDesc.Streams[0], "/practice.PracticeService/PracticeManyTimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &practiceServicePracticeManyTimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PracticeService_PracticeManyTimesClient interface {
	Recv() (*PracticeManyTimesResponse, error)
	grpc.ClientStream
}

type practiceServicePracticeManyTimesClient struct {
	grpc.ClientStream
}

func (x *practiceServicePracticeManyTimesClient) Recv() (*PracticeManyTimesResponse, error) {
	m := new(PracticeManyTimesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *practiceServiceClient) LongPractice(ctx context.Context, opts ...grpc.CallOption) (PracticeService_LongPracticeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PracticeService_serviceDesc.Streams[1], "/practice.PracticeService/LongPractice", opts...)
	if err != nil {
		return nil, err
	}
	x := &practiceServiceLongPracticeClient{stream}
	return x, nil
}

type PracticeService_LongPracticeClient interface {
	Send(*LongPracticeRequest) error
	CloseAndRecv() (*LongPracticeResponse, error)
	grpc.ClientStream
}

type practiceServiceLongPracticeClient struct {
	grpc.ClientStream
}

func (x *practiceServiceLongPracticeClient) Send(m *LongPracticeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *practiceServiceLongPracticeClient) CloseAndRecv() (*LongPracticeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LongPracticeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PracticeServiceServer is the server API for PracticeService service.
type PracticeServiceServer interface {
	// Unary
	Practice(context.Context, *PracticeRequest) (*PracticeResponse, error)
	// Server Streaming
	PracticeManyTimes(*PracticeManyTimesRequest, PracticeService_PracticeManyTimesServer) error
	// Client Streaming
	LongPractice(PracticeService_LongPracticeServer) error
}

// UnimplementedPracticeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPracticeServiceServer struct {
}

func (*UnimplementedPracticeServiceServer) Practice(context.Context, *PracticeRequest) (*PracticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Practice not implemented")
}
func (*UnimplementedPracticeServiceServer) PracticeManyTimes(*PracticeManyTimesRequest, PracticeService_PracticeManyTimesServer) error {
	return status.Errorf(codes.Unimplemented, "method PracticeManyTimes not implemented")
}
func (*UnimplementedPracticeServiceServer) LongPractice(PracticeService_LongPracticeServer) error {
	return status.Errorf(codes.Unimplemented, "method LongPractice not implemented")
}

func RegisterPracticeServiceServer(s *grpc.Server, srv PracticeServiceServer) {
	s.RegisterService(&_PracticeService_serviceDesc, srv)
}

func _PracticeService_Practice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PracticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PracticeServiceServer).Practice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/practice.PracticeService/Practice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PracticeServiceServer).Practice(ctx, req.(*PracticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PracticeService_PracticeManyTimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PracticeManyTimesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PracticeServiceServer).PracticeManyTimes(m, &practiceServicePracticeManyTimesServer{stream})
}

type PracticeService_PracticeManyTimesServer interface {
	Send(*PracticeManyTimesResponse) error
	grpc.ServerStream
}

type practiceServicePracticeManyTimesServer struct {
	grpc.ServerStream
}

func (x *practiceServicePracticeManyTimesServer) Send(m *PracticeManyTimesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PracticeService_LongPractice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PracticeServiceServer).LongPractice(&practiceServiceLongPracticeServer{stream})
}

type PracticeService_LongPracticeServer interface {
	SendAndClose(*LongPracticeResponse) error
	Recv() (*LongPracticeRequest, error)
	grpc.ServerStream
}

type practiceServiceLongPracticeServer struct {
	grpc.ServerStream
}

func (x *practiceServiceLongPracticeServer) SendAndClose(m *LongPracticeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *practiceServiceLongPracticeServer) Recv() (*LongPracticeRequest, error) {
	m := new(LongPracticeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PracticeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "practice.PracticeService",
	HandlerType: (*PracticeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Practice",
			Handler:    _PracticeService_Practice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PracticeManyTimes",
			Handler:       _PracticeService_PracticeManyTimes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LongPractice",
			Handler:       _PracticeService_LongPractice_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "practice/practicepb/practice.proto",
}
